question_number,topic,difficulty,slug,question,correct_approach,incorrect_approach_1,incorrect_approach_2
70,Dynamic Programming,Easy,climbing-stairs,"<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>

<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> n = 2
<strong>Output:</strong> 2
<strong>Explanation:</strong> There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> n = 3
<strong>Output:</strong> 3
<strong>Explanation:</strong> There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n &lt;= 45</code></li>
</ul>
","Use dynamic programming. Create an array dp where dp[i] represents the number of ways to reach step i. Initialize dp[1]=1, dp[2]=2. For i>2, dp[i]=dp[i-1]+dp[i-2]. Return dp[n].","Use recursion without memoization. For each step, recursively calculate the number of ways by adding the results of climbing 1 step and 2 steps. Return the sum of these recursive calls.",Use a mathematical formula. Calculate the number of ways using the formula: ways = (n^2 + n) / 2. This formula assumes a linear relationship between the number of steps and possible ways.
